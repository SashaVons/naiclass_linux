{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/logic/attachEventListeners.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/compact.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/isString.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepMerge.ts","../../src/logic/getFieldsValues.ts","../../src/utils/deepEqual.ts","../../src/logic/isErrorStateChanged.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getFieldArrayParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/onDomRemove.ts","../../src/utils/cloneObject.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/useFormContext.tsx","../../src/logic/getInputValue.ts","../../src/controller.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","HTMLElement","EVENTS","VALIDATION_MODE","SELECT","UNDEFINED","INPUT_VALIDATION_RULES","attachEventListeners","shouldAttachChangeEvent","handleChange","ref","isHTMLElement","addEventListener","isObjectType","isNullOrUndefined","Date","test","filter","Boolean","input","compact","replace","split","set","object","path","index","tempPath","isKey","stringToPath","lastIndex","key","newValue","objValue","isObject","isNaN","data","val","undefined","obj","defaultValue","result","reduce","isUndefined","fields","fieldErrors","get","field","focus","options","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","previous","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","current","disabled","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","Object","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","fieldRef","isCheckBoxInput","forEach","removeAllEventListeners","setFieldArrayDirtyFields","defaultValues","dirtyFields","parentName","deepMerge","target","source","isPrimitive","targetValue","sourceValue","shallowFieldsState","search","output","isString","startsWith","find","transformToNestObject","deepEqual","object1","object2","isErrorObject","keys1","keys2","includes","val1","val2","isErrorStateChanged","errors","error","validFields","fieldsWithValidation","previousError","RegExp","validationData","isRegex","message","getValidateError","validateAllFieldCriteria","types","a","required","maxLength","minLength","min","max","pattern","validate","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","requiredValue","requiredMessage","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","exceedMin","valueDate","valueAsDate","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","getPath","pathWithIndex","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","onDomRemove","removeFieldEventListenerAndRef","observer","MutationObserver","observe","window","document","childList","subtree","cloneObject","isWeb","copy","File","getTime","Set","Map","mode","isOnSubmit","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","modeChecker","isValidateAllFieldCriteria","React.useState","isDirty","submitCount","touched","isSubmitting","isSubmitSuccessful","formState","setFormState","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","state","shouldRenderBaseOnError","shouldRender","shouldReRender","setFieldValue","rawValue","radioRef","selectRef","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","Promise","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","isFieldWatched","match","renderWatchedInputs","found","size","getFieldArrayParentName","setValue","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","skipValidation","parentNodeName","lastIndexOf","currentError","validateResolver","removeFieldEventListener","updateWatchedValue","clearErrors","inputName","setError","shouldFocus","watchInternal","fieldNames","watchId","combinedDefaultValues","fieldArrayValue","assignWatchFields","watch","unregister","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","isSelectInput","register","refOrValidationOptions","rules","handleSubmit","onValid","onInvalid","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","React.useEffect","disconnect","commonProps","control","React.useMemo","prop","FormContext","React.createContext","displayName","React.useContext","as","render","onFocus","rest","methods","isNotFieldArray","getInitialValue","setInputStateValue","valueRef","onFocusRef","commonTask","event","getInputValue","registerField","shouldUpdateValue","defineProperty","onBlur","onChange","props","React.isValidElement","React.cloneElement","React.createElement","_toConsumableArray","arr","arrayLikeToArray","iter","from"],"mappings":"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","file":"static/js/0.127b5b4a.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: [] | string) =>\n  !Array.isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          if (isUndefined(field.ref.focus())) {\n            break;\n          }\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      set(shallowFieldsStateRef.current, name, value);\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (Array.isArray(options) && options.length) {\n      compact(options).forEach((option, index): void => {\n        const { ref } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !compact(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\n\nexport default function setFieldArrayDirtyFields<\n  T extends U,\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setFieldArrayDirtyFields(\n          values[index][key],\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        get(defaultValues[index] || {}, key) === values[index][key]\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n    !dirtyFields.length &&\n      parentNode &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields.length ? dirtyFields : undefined;\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","import isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    if (!(isErrorObject && ['ref', 'context'].includes(key))) {\n      const val1 = object1[key];\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || Array.isArray(val1)) &&\n        (isObject(val2) || Array.isArray(val2))\n          ? !deepEqual(val1, val2, isErrorObject)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default function isErrorStateChanged<TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n}\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? (((fields[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\n\nexport const getPath = <T extends string, U extends object | unknown[]>(\n  path: T,\n  values: U,\n): string[] => {\n  const getInnerPath = <K>(key: K, value: U, isObject?: boolean) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(key, value, isObject(values)))\n    .flat(Infinity) as string[];\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import isPrimitive from './isPrimitive';\n\nexport default function cloneObject<T extends unknown>(\n  data: T,\n  isWeb: boolean,\n): T {\n  let copy: any;\n\n  if (isPrimitive(data) || (isWeb && data instanceof File)) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key), isWeb));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key], isWeb);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const fieldArrayValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<\n    Record<string, InternalNameSet<TFieldValues>>\n  >({});\n  const useWatchRenderFunctionsRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const defaultValuesAtRenderRef = React.useRef<\n    Partial<DefaultValues<TFieldValues>>\n  >({});\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    Record<\n      InternalFieldName<FieldValues>,\n      (data?: UnpackNestedValue<DeepPartial<TFieldValues>>) => void\n    >\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues, isWeb)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) =>\n      !isUnMount.current &&\n      setFormState({\n        ...formStateRef.current,\n        ...state,\n      }),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state)\n      ) {\n        updateFormState({\n          ...state,\n          errors: formStateRef.current.errors,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: string,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | string[]\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(\n          formValues,\n          isEmptyObject(defaultValuesRef.current)\n            ? defaultValuesAtRenderRef.current\n            : defaultValuesRef.current,\n        );\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): {\n      dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    } => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesAtRenderRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        if (isChanged && shouldRender) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...state,\n          };\n          updateFormState({\n            ...state,\n          });\n        }\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = (\n          await validateField<TFieldValues>(\n            fieldsRef,\n            isValidateAllFieldCriteria,\n            fieldsRef.current[name] as Field,\n            shallowFieldsStateRef,\n          )\n        )[name];\n\n        shouldRenderBaseOnError(name, error, skipReRender);\n\n        return isUndefined(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          errors: formStateRef.current.errors,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields, readFormStateRef.current.isValid);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    <T extends string, U extends object | unknown[]>(\n      name: T,\n      value: U,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig = {},\n    ) => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          fieldArrayDefaultValuesRef.current[name] = value;\n          resetFieldArrayFunctionRef.current[name]({\n            [name]: value,\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n              dirtyFields: formStateRef.current.dirtyFields,\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getFieldArrayParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value:\n      | FieldValue<TFieldValues>\n      | UnpackNestedValue<DeepPartial<TFieldValues>>\n      | string[]\n      | undefined\n      | null\n      | boolean,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value as TFieldValues[string], config);\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n    (config || {}).shouldValidate && trigger(name as any);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender = !isEmptyObject(state) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (!error && resolverRef.current) {\n              const parentNodeName = name.substring(\n                0,\n                name.lastIndexOf('.') > name.lastIndexOf('[')\n                  ? name.lastIndexOf('.')\n                  : name.lastIndexOf('['),\n              );\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            if (previousFormIsValid !== isValid) {\n              shouldRender = true;\n            }\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data, isWeb);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current, isWeb),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else if (watchFieldsRef) {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(defaultValuesAtRenderRef.current, field.ref.name);\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            errors: formStateRef.current.errors,\n            isDirty: isFormDirty(),\n            dirtyFields: formStateRef.current.dirtyFields,\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n      errors: formStateRef.current.errors,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current, isWeb),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        if (fieldArrayNamesRef.current.has(fieldNames)) {\n          const fieldArrayValue = get(\n            fieldArrayValuesRef.current,\n            fieldNames,\n            [],\n          );\n          fieldValues =\n            fieldArrayValue.length !==\n              compact(get(fieldValues, fieldNames, [])).length ||\n            !fieldArrayValue.length\n              ? fieldArrayValuesRef.current\n              : fieldValues;\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(validateOptions)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          if (previousFormIsValid !== isEmptyObject(error)) {\n            updateFormState();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      set(\n        defaultValuesAtRenderRef.current,\n        name,\n        isEmptyDefaultValue\n          ? isObject(fieldValue)\n            ? { ...fieldValue }\n            : fieldValue\n          : defaultValue,\n      );\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current, isWeb),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          errors: formStateRef.current.errors,\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = cloneObject(\n      values || defaultValuesRef.current,\n      isWeb,\n    );\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values, isWeb) || {};\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      isUnMount.current = true;\n      observerRef.current && observerRef.current.disconnect();\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import * as React from 'react';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types';\nimport { ControllerProps } from './types';\nimport isFunction from './utils/isFunction';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formStateRef: {\n      current: { isSubmitted, touched },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const ref = React.useRef({\n    focus: () => null,\n  });\n  const onFocusRef = React.useRef(\n    onFocus ||\n      (() => {\n        if (isFunction(ref.current.focus)) {\n          ref.current.focus();\n        } else {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(\n              `📋 'ref' from Controller render prop must be attached to a React component or a DOM Element whose ref provides a 'focus()' method`,\n            );\n          }\n        }\n      }),\n  );\n\n  const shouldValidate = React.useCallback(\n    (isBlurEvent?: boolean) =>\n      !skipValidation({\n        isBlurEvent,\n        isReValidateOnBlur,\n        isReValidateOnChange,\n        isSubmitted,\n        isTouched: !!get(touched, name),\n        ...mode,\n      }),\n    [\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      touched,\n      name,\n      mode,\n    ],\n  );\n\n  const commonTask = React.useCallback(([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  }, []);\n\n  const registerField = React.useCallback(\n    (shouldUpdateValue?: boolean) => {\n      if (process.env.NODE_ENV !== 'production' && !name) {\n        return console.warn(\n          '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n        );\n      }\n\n      if (fieldsRef.current[name]) {\n        fieldsRef.current[name] = {\n          ref: fieldsRef.current[name]!.ref,\n          ...rules,\n        };\n      } else {\n        register(\n          Object.defineProperty(\n            {\n              name,\n              focus: onFocusRef.current,\n            },\n            VALUE,\n            {\n              set(data) {\n                setInputStateValue(data);\n                valueRef.current = data;\n              },\n              get() {\n                return valueRef.current;\n              },\n            },\n          ),\n          rules,\n        );\n\n        shouldUpdateValue = !get(defaultValuesRef.current, name);\n      }\n\n      shouldUpdateValue &&\n        isNotFieldArray &&\n        setInputStateValue(getInitialValue());\n    },\n    [rules, name, register],\n  );\n\n  React.useEffect(() => () => unregister(name), [unregister, name]);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(\n          `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n        );\n      }\n\n      if ((!as && !render) || (as && render)) {\n        console.warn(\n          `📋 ${name} Controller should use either the 'as' or 'render' prop, not both. https://react-hook-form.com/api#Controller`,\n        );\n      }\n\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn(\n          '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n        );\n      }\n    }\n\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    !fieldsRef.current[name] && registerField(true);\n  });\n\n  const onBlur = React.useCallback(() => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    shouldValidate(true) && trigger(name);\n  }, [\n    name,\n    touched,\n    updateFormState,\n    shouldValidate,\n    trigger,\n    readFormStateRef,\n  ]);\n\n  const onChange = React.useCallback(\n    (...event: any[]) =>\n      setValue(name, commonTask(event), {\n        shouldValidate: shouldValidate(),\n        shouldDirty: true,\n      }),\n    [setValue, name, shouldValidate],\n  );\n\n  const commonProps = {\n    onChange,\n    onBlur,\n    name,\n    value,\n    ref,\n  };\n\n  const props = {\n    ...rest,\n    ...commonProps,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props as any)\n    : render\n    ? render(commonProps)\n    : null;\n};\n\nexport { Controller };\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}