{"version":3,"sources":["components/AcceptDialog/AcceptDialog.tsx","components/FormSelect/FormSelect.tsx","common/utils/date.ts","pages/OrderItem/OrderItemContainet.tsx","common/hooks/usePage.ts","components/Pagination/index.tsx","common/database/orders.ts","pages/OrdersList/OrdersListContainer.tsx"],"names":["AcceptDialog","title","content","show","setShow","actionOnSuccess","open","onClose","aria-labelledby","aria-describedby","id","onClick","color","autoFocus","FormSelect","placeholder","name","errors","control","options","onChangeAction","required","defaultValue","multi","style","width","marginBottom","className","render","onChange","value","onBlur","ref","e","isMulti","filter","el","parseISODate","date","parseISO","isDateBefore","dateToCompare","isBefore","isDateAfter","isAfter","monthFormatterFullYear","divider","format","now","parse","Date","dateToLisbonTimezone","utcToZonedTime","differenceFormat","distanceDate","endDate","seconds","differenceInSeconds","secondsToTimer","Math","floor","map","time","index","join","STATUS_NAMES","InfoBlock","visible","connect","state","singleOrder","orders","user","dispatch","fetchSingleOrder","orderId","fetchUpdateOrderStatus","newStatus","userId","match","useRouteMatch","useForm","handleSubmit","register","setValue","params","console","log","useEffect","disabledStatus","status","type","label","onClickShowMaps","a","address","streetName","replace","url","streetNumber","window","display","flexDirection","paymentType","marginLeft","dateOfAccepted","fontWeight","moment","toDate","getDifferencePick","dateOfClose","onSubmit","data","orderNumber","_id","alignItems","opacity","cursor","undefined","border","borderRadius","padding","promocode","discount","total","price","toFixed","percent","getTotalOrderPrice","code","nif","userName","phoneNumber","comment","marginTop","products","sort","b","aPriority","priority","bPriority","item","align","src","images","alt","title_pt","storage_info","count","current","usePage","props","query","URLSearchParams","useLocation","search","history","useHistory","useState","indexes","setIndexes","page","setPage","queryLoaded","setQueryLoaded","countPages","setCountPages","arrayPages","setArrayPages","queryPage","get","numberPage","Number","isNaN","countItems","countOfPages","maxItemsOnPage","preparePageEnd","pageBegin","pageEnd","arrayOfPages","i","push","begin","end","actions","baseUrl","loading","Pagination","pages","selectedPage","getPromocode","firestore","collection","doc","then","response","PAYMENT_TYPES","CARD","CASH","MBWAY","fetchAllOrders","fetchDeleteCategory","categoryId","setOpen","categoryIndex","promocodesDetails","setPromocodeDetails","loadingPromocodes","setLoadingPromocodes","length","onSnapshot","snapshot","renderPromocodeDetails","prev","slice","utcOffset","some","find"],"mappings":"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","file":"static/js/8.b03e874e.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\ninterface AcceptDialogProps {\n  title: string;\n  content?: string;\n  show: boolean;\n  setShow: React.Dispatch<React.SetStateAction<boolean>>;\n  actionOnSuccess: () => void;\n}\n\nexport const AcceptDialog: FC<AcceptDialogProps> = ({\n  title,\n  content,\n  show,\n  setShow,\n  actionOnSuccess,\n}) => {\n  return (\n    <>\n      <Dialog\n        open={show}\n        onClose={() => setShow(false)}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\n\n        {content ? (\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-description\">\n              {content}\n            </DialogContentText>\n          </DialogContent>\n        ) : null}\n        <DialogActions>\n          <Button onClick={() => setShow(false)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            onClick={() => {\n              actionOnSuccess();\n              setShow(false);\n            }}\n            color=\"primary\"\n            autoFocus\n          >\n            Ok\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n","import React, { FC } from \"react\";\nimport Select from \"react-select\";\nimport { Controller } from \"react-hook-form\";\nimport \"./form-select.scss\";\n\ninterface FormSelectProps {\n  placeholder?: string;\n  errors: any;\n  name: string;\n  control: any;\n  options: any;\n  required: any;\n  title?: string;\n  onChangeAction?: (value: any) => void;\n  defaultValue?: any;\n  multi?: boolean;\n}\n\nexport const FormSelect: FC<FormSelectProps> = ({\n  placeholder,\n  errors,\n  name,\n  control,\n  options,\n  title,\n  required,\n  onChangeAction,\n  defaultValue,\n  multi,\n}) => {\n  return (\n    <div style={{ width: \"100%\", marginBottom: 24 }}>\n      <p className=\"Row-Title\">{title}</p>\n      <Controller\n      control={control}\n      style={{ width: \"100%\", marginBottom: 24 }}\n      name={name}\n      render={({ onChange, onBlur, value, name, ref }) => (\n        <Select\n          className={\"Select\"}\n          onChange={(e: any) => {\n            if (onChangeAction) onChangeAction(e.value);\n            onChange(e);\n          }}\n          value={value}\n          isMulti={multi ? multi : false}\n          placeholder={placeholder}\n          options={options}\n        />\n      )}\n      defaultValue={\n        defaultValue\n          ? options.filter((el: any) => el.value === defaultValue)[0]\n          : null\n      }\n      />\n    </div>\n  );\n};\n","import {\n  format,\n  parseISO,\n  isAfter,\n  isBefore,\n  subDays,\n  isDate as isDateFNS,\n  parse,\n  differenceInMinutes,\n  differenceInSeconds,\n} from \"date-fns\";\nimport { utcToZonedTime } from \"date-fns-tz\";\nimport moment from \"moment\";\n\nexport const parseISODate = (date: Date | string) =>\n  typeof date === \"string\" ? parseISO(date) : date;\n\nexport const isDate = (date: Date | string) => isDateFNS(date);\n\nexport const subDateDays = (date: Date | string, amount: number) =>\n  subDays(parseISODate(date), amount);\n\nexport const isDateBefore = (\n  date: Date | string,\n  dateToCompare: Date | string\n) => isBefore(parseISODate(date), parseISODate(dateToCompare));\n\nexport const isDateAfter = (\n  date: Date | string,\n  dateToCompare: Date | string\n) => isAfter(parseISODate(date), parseISODate(dateToCompare));\n\nexport const monthFormatter = (date: Date | string, divider = \".\") =>\n  format(parseISODate(date), `yy${divider}MM${divider}dd`);\n\nexport const monthFormatterFullYear = (date: Date | string, divider = \".\") =>\n  format(parseISODate(date), `yyyy${divider}MM${divider}dd`);\n\nexport const fullDateFormatter = (date: Date | string, divider = \".\") =>\n  format(parseISODate(date), `HH:mm aaa iiii do LLLL`);\n\nexport const dayDateFormatter = (date: Date | string, divider = \".\") =>\n  format(parseISODate(date), `iiii do LLLL`);\n\nexport const timeFormatter = (date: Date | string) =>\n  format(parseISODate(date), \"HH:mm\");\n\nexport const parseShortDate = (date: string) =>\n  parse(date, \"dd/MM/yyyy\", new Date());\n\nexport const now = () =>\n  parse(format(new Date(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\", new Date());\n\nexport const dateToLisbonTimezone = (date: Date) => {\n  return utcToZonedTime(date, 'Asia/Tokyo')\n}\n\nexport const differenceFormat = (distanceDate: Date, endDate: Date) => {\n  const seconds = differenceInSeconds(\n    dateToLisbonTimezone(distanceDate), \n    dateToLisbonTimezone(endDate)\n  );\n\n  return secondsToTimer(seconds)\n}\n\nexport const secondsToTimer = (seconds: number) => {\n  const hour = Math.floor(seconds / 3600);\n  const minute = Math.floor(seconds / 60) % 60;\n  const second = seconds % 60;\n\n  return [hour, minute, second]\n    .map(time => time < 10 ? \"0\" + time : time)\n    .filter((time, index) => time !== \"00\" || index > 0)\n    .join(\":\");\n}","import React, { FC, useEffect } from \"react\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport Icon from \"@material-ui/core/Icon\";\nimport {\n  fetchSingleOrder,\n  fetchUpdateOrderStatus,\n} from \"../../redux/orders/actions\";\nimport { useForm } from \"react-hook-form\";\nimport { RootState } from \"../../redux/RootReducer\";\nimport moment from \"moment\";\nimport \"./order-item.scss\";\nimport { FormSelect } from \"../../components/FormSelect/FormSelect\";\nimport \"../ProductsList/products-list.scss\";\nimport { differenceFormat, dateToLisbonTimezone, parseISODate } from \"../../common/utils/date\"\nimport axios from 'axios'\n\ntype EditOrder = {\n  status: string;\n};\n\ninterface OrderItemProps {\n  singleOrder: any;\n  user: any;\n  fetchSingleOrder: (orderId: string) => void;\n  fetchUpdateOrderStatus: (orderId: string, newStatus: string, userId: string) => void;\n}\n\nexport const STATUS_NAMES: Record<string, string> = {\n  \"WAIT FOR CARD PAYMENT\": 'Wait for card payment',\n  \"DELIVERING\": \"Ready to pick\",\n  \"ACCEPTED\": \"Picking\",\n  \"SENT\": \"Delivering\",\n  \"CLOSE\": \"Delivered\",\n  \"CANCELED\": \"Canceled\",\n}\n\ninterface InfoBlockProps {\n  title: string\n  value: any\n  visible?: boolean\n}\n\nconst InfoBlock = ({ title, value, visible = true }: InfoBlockProps) => {\n  if (!visible) {\n    return null\n  }\n\n  return (\n    <div className=\"Order-Item-Column\">\n      <p className=\"Order-Item-Form-Title\">{title}</p>\n      <p className=\"Order-Item-Form-Text\">{value}</p>\n    </div>\n  )\n}\n\nconst OrderItemContainer: FC<OrderItemProps> = ({\n  fetchSingleOrder,\n  fetchUpdateOrderStatus,\n  singleOrder,\n  user,\n}) => {\n  const match = useRouteMatch<any>();\n  const { register, handleSubmit, errors, setValue, control } = useForm();\n  const { orderId } = match.params;\n\n  console.log(singleOrder);\n\n  useEffect(() => {\n    fetchSingleOrder(orderId);\n  }, []);\n\n  const getDifferencePick = (): string | null => {\n    if (!singleOrder?.dateOfAccepted) {\n      return null\n    }\n\n    const dateOfAccepted = moment(singleOrder.dateOfAccepted)\n    const date = moment(singleOrder.date)\n    console.log(dateOfAccepted.toDate())\n    console.log(date.toDate())\n\n    return differenceFormat(\n      parseISODate(singleOrder.dateOfAccepted),\n      parseISODate(singleOrder.date),\n    )\n  }\n\n  const getDifferenceClose = (): string | null => {\n    if (!singleOrder?.dateOfClose) {\n      return null\n    }\n\n    return differenceFormat(\n      parseISODate(singleOrder.dateOfClose),\n      parseISODate(singleOrder.date),\n    )\n  }\n\n  const checkIsButtonStatusDisabled = () => {\n    if (!singleOrder?.status) {\n      return true\n    }\n\n    if (user.type === 'picker') {\n      return (\n        singleOrder.status === 'SENT' ||\n        singleOrder.status === 'CLOSE' ||\n        singleOrder.status === 'CANCELED'\n      )\n    }\n\n    if (user.type === 'dispatcher') {\n      return (\n        singleOrder.status === 'CLOSE' ||\n        singleOrder.status === 'CANCELED'\n      )\n    }\n\n    return true\n  } \n\n  const disabledStatus = checkIsButtonStatusDisabled()\n\n  useEffect(() => {\n    if (singleOrder)\n      setValue(\"status\", {\n        value: singleOrder.status,\n        label: STATUS_NAMES[singleOrder.status],\n      });\n  }, [singleOrder]);\n\n  const onSubmit = (data: EditOrder) => {\n    console.log(data);\n  };\n\n  const onClickShowMaps = async () => {\n    const address = singleOrder.address.streetName.replace(\" \", \"+\");\n    const url = `https://www.google.com.ua/maps/place/${address}+${singleOrder.address.streetNumber}+Lisboa`;\n\n    window.open(url);\n  };\n\n  const onChangeStatusByRole = () => {\n    if (user.type === 'picker') {\n      fetchUpdateOrderStatus(singleOrder._id, 'SENT', singleOrder.userId)\n    }\n\n    if (user.type === 'dispatcher') {\n      fetchUpdateOrderStatus(singleOrder._id, 'CLOSE', singleOrder.userId)\n    }\n  }\n\n  const getTotalOrderPrice = () => {\n    if (singleOrder.promocode && singleOrder.promocode.discount) {\n      if (!singleOrder.promocode.type || singleOrder.promocode.type === 'CASH') {\n        const total = singleOrder.price + singleOrder.promocode.discount ?? 0\n        return `${total.toFixed(2)} €`\n      }\n\n      const percent = singleOrder.price * 100 / (100 - singleOrder.promocode.discount)\n      return `${percent.toFixed(2)} €`\n    }\n\n    return `${singleOrder.price.toFixed(2)} €`;\n  };\n\n  const priorityCompare = (a: any, b: any) => {\n    const aPriority = a.priority || 0;\n    const bPriority = b.priority || 0;\n\n    if (aPriority < bPriority) return -1;\n    if (aPriority > bPriority) return 1;\n\n    return 0;\n  };\n\n  if (!singleOrder) {\n    return null\n  }\n\n  return (\n    <div className=\"Order-Item\">\n      <div className=\"Order-Item-Header\">\n        <p className=\"Order-Item-Header-Title\" style={{ display: 'flex', flexDirection: 'row' }}>Order{'  '}\n          {singleOrder.paymentType === 'CARD' && <p style={{ color: 'green', marginLeft: 5 }} >PAID</p>}\n        </p>\n        <div className=\"Order-Item-Header-Button\">\n          {singleOrder?.dateOfAccepted && (\n            <div style={{ fontWeight: 'bold' }} > \n              Time of picking - {getDifferencePick()}\n            </div>\n          )}\n\n          {singleOrder?.dateOfClose && (\n            <div style={{ fontWeight: 'bold' }} > \n              Time of close - {getDifferenceClose()}\n            </div>\n          )}\n        </div>\n      </div>\n      <form className=\"Order-Item-Form\" onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"Order-Item-Row\">\n          <InfoBlock title=\"Date\" value={moment(singleOrder.date).format(\"DD/MM/YY HH:mm\")} />\n          <InfoBlock title=\"Order number\" value={singleOrder.orderNumber} />\n\n          <div className=\"Order-Item-Column\">\n            <div style={{ width: '100%' }}>\n              {user.type === \"admin\" || user.type === \"picker\" ? (\n                <div>\n                  <p className=\"Order-Item-Form-Title\">Status</p>\n                  <FormSelect\n                    placeholder={\"Status\"}\n                    name={\"status\"}\n                    options={[\n                      { _id: \"DELIVERING\", name: \"Ready to pick\" },\n                      { _id: \"ACCEPTED\", name: \"Picking\" },\n                      { _id: \"SENT\", name: \"Delivering\" },\n                      { _id: \"CLOSE\", name: \"Delivered\" },\n                      { _id: \"CANCELED\", name: \"Canceled\" },\n                    ].map((el: any) => {\n                      return { value: el._id, label: el.name };\n                    })}\n                    errors={errors}\n                    control={control}\n                    onChangeAction={(value: string) =>\n                      fetchUpdateOrderStatus(singleOrder._id, value, singleOrder.userId)\n                    }\n                    required={{ required: true }}\n                  />\n                </div>\n              ) : (\n                <div>\n                  <p className=\"Order-Item-Form-Title\">Status</p>\n                  <p className=\"Order-Item-Form-Text\">{STATUS_NAMES[singleOrder.status]}</p>\n                </div>\n              )}\n\n              {(user.type === 'picker' || user.type === \"dispatcher\") && (\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    alignItems: \"center\",\n                    width: '100%',\n                    opacity: disabledStatus ? 0.4 : 1,\n                    cursor: !disabledStatus ? \"pointer\" : undefined,\n                  }}\n                  onClick={!disabledStatus ? onChangeStatusByRole : () => {}}\n                >\n                  <div\n                    style={{\n                      border: \"2px solid #c700cb\",\n                      borderRadius: 10,\n                      padding: 7,\n                      width: '100%',\n                      color: \"#c700cb\",\n                    }}\n                  >\n                    {user.type === 'picker' && 'Picked'}\n                    {user.type === 'dispatcher' && 'Delivered'}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"Order-Item-Row\">\n            <InfoBlock title=\"Payment type\" value={singleOrder.paymentType} />\n            <InfoBlock title=\"Subtotal\" value={getTotalOrderPrice()} />\n            <InfoBlock title=\"Total\" value={`${singleOrder.price?.toFixed(2)} €`} />\n            <InfoBlock \n              title=\"Promocode\" \n              value={singleOrder.promocode?.code \n                      ? user.type === \"admin\" \n                          ? singleOrder.promocode.code \n                          : \"Used\"\n                      : \"None\"}\n            />\n        </div>\n\n          <div className=\"Order-Item-Row\">\n            <InfoBlock title=\"NIF\" value={singleOrder?.nif} visible={!!singleOrder?.nif}/>\n            <InfoBlock title=\"User Name\" value={singleOrder.userName} visible={!!singleOrder.userName} />\n            <InfoBlock title=\"Phone Number\" value={singleOrder.phoneNumber} visible={!!singleOrder.phoneNumber} />\n            <InfoBlock title=\"Comment\" \n              value={singleOrder.address?.comment\n                ? singleOrder.address.comment\n                : \"Not added\"}\n            />\n          </div>\n\n          <p className=\"Order-Item-Form-Main\" style={{ marginBottom: 30, marginTop: 50 }}>ADDRESS</p>\n\n          <div className=\"Order-Item-Row\">\n            <InfoBlock title=\"Street Name\" \n              value={singleOrder.address?.streetName\n                ? singleOrder.address.streetName\n                : \"Not added\"}\n            />\n\n            <InfoBlock title=\"Street Number\" \n              value={singleOrder.address?.streetNumber\n                ? singleOrder.address.streetNumber\n                : \"Not added\"}\n            />\n\n            <InfoBlock title=\"Floor\" \n              value={singleOrder.address?.floor\n                ? singleOrder.address.floor\n                : \"Not added\"}\n            />\n          </div>\n\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              alignItems: \"center\",\n              marginBottom: 25,\n              cursor: \"pointer\",\n            }}\n            onClick={onClickShowMaps}\n          >\n            <div\n              style={{\n                border: \"2px solid #c700cb\",\n                borderRadius: 10,\n                padding: 7,\n                color: \"#c700cb\",\n              }}\n            >\n              Show on maps\n            </div>\n          </div>\n          <p className=\"Order-Item-Form-Main\">Products</p>\n          <table className=\"Orders-Table\">\n            <thead>\n              <tr>\n                <th>Image</th>\n                <th>Title</th>\n                <th>Storage Info</th>\n                <th>Count</th>\n                <th>Price</th>\n                <th>Priority</th>\n              </tr>\n            </thead>\n            <tbody>\n              {singleOrder.products\n                ? singleOrder.products\n                    .sort(priorityCompare)\n                    .map((item: any, index: number) =>\n                      !item.price ? null : (\n                        <>\n                          <tr>\n                            <td align=\"left\">\n                              <img\n                                src={item.images[0]}\n                                alt=\"\"\n                                className=\"Orders-Table-Image\"\n                              />\n                            </td>\n                            <td className=\"Orders-Table-Title\" align=\"left\">\n                              {item.title_pt}\n                            </td>\n                            <td className=\"Orders-Table-Title\" align=\"left\">\n                              {item.storage_info}\n                            </td>\n                            <td className=\"Orders-Table-Title\" align=\"left\">\n                              {item.count}\n                            </td>\n                            <td className=\"Orders-Table-Title\" align=\"left\">\n                              {item.price.current.toFixed(2)}\n                            </td>\n                            <td className=\"Orders-Table-Title\" align=\"left\">\n                              {item.priority || 0}\n                            </td>\n                          </tr>\n                        </>\n                      )\n                    )\n                : null}\n            </tbody>\n          </table>\n      </form>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    singleOrder: state.orders.singleOrder,\n    user: state.user.user,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  fetchSingleOrder: (orderId: string) => dispatch(fetchSingleOrder(orderId)),\n  fetchUpdateOrderStatus: (orderId: string, newStatus: string, userId: string) =>\n    dispatch(fetchUpdateOrderStatus(orderId, newStatus, userId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrderItemContainer);\n","import { useState, useEffect } from 'react';\nimport { useLocation, useHistory } from \"react-router-dom\";\n\ninterface UsePageProps {\n  countItems: number\n  maxItemsOnPage: number\n  baseUrl: string\n}\n\ninterface Indexes {\n  begin: number\n  end: number\n}\n\nconst useQuery = () => new URLSearchParams(useLocation().search);\n\nconst usePage = (props: UsePageProps) => {\n  const query = useQuery();\n  const history = useHistory();\n\n  const [indexes, setIndexes] = useState<Indexes | null>(null)\n  const [page, setPage] = useState<number>(0)\n  const [queryLoaded, setQueryLoaded] = useState<boolean>(false)\n  const [countPages, setCountPages] = useState<number>(0)\n  const [arrayPages, setArrayPages] = useState<number[]>([])\n\n  useEffect(() => {\n    if (query && !queryLoaded) {\n      const queryPage = query.get(\"page\")\n      const numberPage = Number(queryPage)\n      \n      setPage(\n        !isNaN(numberPage) \n          ? (numberPage > 0 ? numberPage - 1 : numberPage)\n          : 0 \n      )\n\n      setQueryLoaded(true)\n    }\n  }, [query, queryLoaded])\n\n  useEffect(() => {\n    if (props.countItems) {\n      setIndexes(null)\n      const countOfPages = props.countItems / props.maxItemsOnPage\n\n      if (page > countOfPages) {\n        setPage(0)\n        return\n      }\n\n      const preparePageEnd = (page * props.maxItemsOnPage) + props.maxItemsOnPage\n\n      const pageBegin = page * props.maxItemsOnPage\n      const pageEnd = preparePageEnd > props.countItems ? props.countItems - 1 : preparePageEnd\n\n      const arrayOfPages = []\n      for (let i = 0; i < countOfPages; i++) {\n        arrayOfPages.push(i + 1)\n      }\n\n      setCountPages(Number(countOfPages.toFixed(0)))\n\n      setArrayPages(arrayOfPages)\n\n      setIndexes({\n        begin: pageBegin,\n        end: pageEnd,\n      })\n    }\n  }, [page, props.maxItemsOnPage, props.countItems])\n\n  const setHistoryPage = (page: number) => {\n    history.push(`${props.baseUrl}?page=${page}`)\n    setQueryLoaded(false)\n  }\n\n  return {\n    actions: {\n      setPage: setHistoryPage,\n    },\n    loading: !indexes,\n    page,\n    indexes,\n    countPages,\n    arrayPages,\n  }\n}\n\nexport default usePage","import React from \"react\";\nimport \"./styles.scss\";\n\ninterface PaginationProps {\n  pages: number[]\n  selectedPage: number\n  onChange: (page: number) => void\n}\n\nconst Pagination = (props: PaginationProps) => {\n  return (\n    <div className=\"Pagination-Wrapper\">\n      {props.pages.map(page => (\n        <div \n          className=\"Pagination-Block\" \n          style={{ opacity: page -1 === props.selectedPage ? 1.0 : 0.3 }}\n          onClick={() => props.onChange(page)}\n        >\n          {page}\n        </div>\n      ))}\n    </div>\n  )\n};\n\nexport default Pagination;","import { firestore } from \"../firebase\"\n\nexport const getPromocode = async (id: string) => {\n  const response = await firestore\n    .collection(\"promocode\")\n    .doc(id)\n    .get()\n    .then(ref => ({\n      _id: ref.id,\n      ...ref.data(),\n    }))\n\n  return response ?? id as any\n}","import React, { FC, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport {\n  fetchAllCategories,\n  fetchDeleteCategory,\n} from \"../../redux/categories/actions\";\nimport { Link, useRouteMatch, useHistory } from \"react-router-dom\";\nimport { RootState } from \"../../redux/RootReducer\";\nimport Icon from \"@material-ui/core/Icon\";\nimport Switch from \"react-switch\";\nimport \"./orders-list.scss\";\nimport { AcceptDialog } from \"../../components/AcceptDialog/AcceptDialog\";\nimport { fetchAllOrders } from \"../../redux/orders/actions\";\nimport moment from \"moment\";\nimport usePage from \"../../common/hooks/usePage\";\nimport Pagination from \"../../components/Pagination\";\nimport { getPromocode } from \"../../common/database/orders\";\nimport { STATUS_NAMES } from \"../OrderItem/OrderItemContainet\";\nimport { firestore } from \"../../common/firebase\";\n\nconst PAYMENT_TYPES: Record<string, string> = {\n  CARD: \"CARD\",\n  CASH: \"Pagar no ato de entrega\",\n  MBWAY: \"MBWAY\",\n};\n\ninterface OrdersListProps {\n  orders: any;\n  user: any;\n  fetchAllOrders: () => void;\n  fetchDeleteCategory: (categoryId: string) => void;\n}\n\nconst OrdersListContainer: FC<OrdersListProps> = ({\n  orders,\n  user,\n  fetchAllOrders,\n  fetchDeleteCategory,\n}) => {\n  const history = useHistory();\n  const [open, setOpen] = useState(false);\n  const [categoryIndex, setCategoryIndex] = useState(0);\n  const [promocodesDetails, setPromocodeDetails] = useState<\n    {\n      orderId: string;\n      code: string;\n    }[]\n  >([]);\n  const [loadingPromocodes, setLoadingPromocodes] = useState<\n    {\n      orderId: string;\n    }[]\n  >([]);\n\n  const { actions, page, loading, indexes, arrayPages } = usePage({\n    maxItemsOnPage: 50,\n    countItems: orders?.length ?? 0,\n    baseUrl: \"/cabinet/orders\",\n  });\n\n  useEffect(() => {\n    firestore.collection(\"orders\").onSnapshot((snapshot) => {\n      fetchAllOrders();\n    });\n  }, []);\n\n  const getPromocodePreview = async (promocode: any) => {\n    if (!promocode) {\n      return \"None\";\n    }\n\n    return \"Used\";\n  };\n\n  console.log(promocodesDetails);\n\n  const renderPromocodeDetails = async (orderId: string, promocode: any) => {\n    setLoadingPromocodes((prev) => [\n      ...prev,\n      {\n        orderId,\n      },\n    ]);\n\n    const response = await getPromocode(promocode);\n\n    setPromocodeDetails((prev) => [\n      ...prev,\n      {\n        orderId,\n        code: (response as any).code ?? \"Promocode deleted\",\n      },\n    ]);\n  };\n\n  const loadPromocode = (orderId: string, promocode: any) => {\n    if (loadingPromocodes.some((promocode) => promocode.orderId === orderId)) {\n      return \" \";\n    }\n\n    renderPromocodeDetails(orderId, promocode);\n    return \" \";\n  };\n\n  return (\n    <>\n      <AcceptDialog\n        title=\"Do you want delete this category?\"\n        show={open}\n        actionOnSuccess={() => fetchDeleteCategory(orders[categoryIndex]._id)}\n        setShow={setOpen}\n      />\n      <div className=\"Orders\">\n        <div className=\"Orders-Header\">\n          <div className=\"Orders-Header-Button\"></div>\n          <p className=\"Orders-Header-Title\">Orders</p>\n          <div className=\"Orders-Header-Button\"></div>\n        </div>\n        <table className=\"Orders-Table\" style={{ marginBottom: 15 }}>\n          <thead>\n            <tr>\n              <th>Date</th>\n              <th>Order number</th>\n              <th>Status</th>\n              <th>Products Count</th>\n              <th>Price</th>\n              <th>Promocode</th>\n              <th>Payment Type</th>\n            </tr>\n          </thead>\n          <tbody>\n            {orders && !loading\n              ? orders\n                  .slice(indexes?.begin, indexes?.end)\n                  .map((item: any, index: number) => (\n                    <>\n                      <tr\n                        onClick={() =>\n                          history.push(`/cabinet/orders/${item._id}`)\n                        }\n                      >\n                        <td className=\"Orders-Table-Title\" align=\"left\">\n                          {moment(item.date)\n                            .utcOffset(1, false)\n                            .format(\"DD/MM/YY HH:mm\")}\n                        </td>\n                        <td className=\"Orders-Table-Title\" align=\"left\">\n                          {item.orderNumber}\n                        </td>\n                        <td className=\"Orders-Table-Title\" align=\"left\">\n                          {STATUS_NAMES[item.status]}\n                        </td>\n                        <td className=\"Orders-Table-Title\" align=\"left\">\n                          {item.products?.length ?? 0}\n                        </td>\n                        <td className=\"Orders-Table-Title\" align=\"left\">\n                          {item.price.toFixed(2)}\n                        </td>\n                        <td className=\"Orders-Table-Title\" align=\"left\">\n                          {!item.promocode\n                            ? \"None\"\n                            : user.type === \"admin\"\n                            ? promocodesDetails.some(\n                                (promocode) => promocode.orderId === item._id\n                              )\n                              ? promocodesDetails.find(\n                                  (promocode) => promocode.orderId === item._id\n                                )?.code\n                              : loadPromocode(item._id, item.promocode)\n                            : \"Used\"}\n                        </td>\n                        <td className=\"Orders-Table-Title\" align=\"left\">\n                          {PAYMENT_TYPES[item.paymentType]}\n                        </td>\n                      </tr>\n                    </>\n                  ))\n              : null}\n          </tbody>\n        </table>\n        <Pagination\n          pages={arrayPages}\n          selectedPage={page}\n          onChange={(page) => {\n            setLoadingPromocodes([]);\n            setPromocodeDetails([]);\n            actions.setPage(page);\n          }}\n        />\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    orders: state.orders.orders,\n    user: state.user.user,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  fetchAllOrders: () => dispatch(fetchAllOrders()),\n  fetchDeleteCategory: (categoryId: string) =>\n    dispatch(fetchDeleteCategory(categoryId)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(OrdersListContainer);\n"],"sourceRoot":""}