{"version":3,"sources":["components/AcceptDialog/AcceptDialog.tsx","common/hooks/usePage.ts","components/Pagination/index.tsx","components/AmountInputDialog/index.tsx","common/hooks/useProducts.ts","pages/ProductsList/ProductsListContainer.tsx"],"names":["AcceptDialog","title","content","show","setShow","actionOnSuccess","open","onClose","aria-labelledby","aria-describedby","id","onClick","color","autoFocus","usePage","props","query","URLSearchParams","useLocation","search","history","useHistory","useState","indexes","setIndexes","page","setPage","queryLoaded","setQueryLoaded","countPages","setCountPages","arrayPages","setArrayPages","useEffect","queryPage","get","numberPage","Number","isNaN","countItems","countOfPages","maxItemsOnPage","preparePageEnd","pageBegin","pageEnd","arrayOfPages","i","push","toFixed","begin","end","actions","baseUrl","loading","Pagination","className","pages","map","style","opacity","selectedPage","onChange","AmountDialog","amount","setAmount","Dialog","DialogTitle","DialogContent","TextField","label","variant","type","e","target","value","DialogActions","Button","useProducts","dispatch","useDispatch","products","useSelector","state","product","sortProducts","setSortProducts","fetchAllProducts","name","zero","length","filtered","filter","searchByPattern","title_pt","storage_count","console","log","pattern","lTitle","toLocaleLowerCase","lPattern","position","found","j","reload","priorityCompare","a","b","aPriority","priority","bPriority","connect","user","fetchDeleteProduct","productId","fetchUpdateProduct","updated_product","refresh","match","useRouteMatch","setOpen","stockVisible","setStockVisible","amountVisible","setAmountVisible","nameSort","setNameSort","selectedProduct","setSelectedProduct","productIndex","setProductIndex","onlyZeroCount","setOnlyZeroCount","onPressZeroSort","_id","display","flexDirection","alignItems","to","url","Icon","sort","slice","item","index","align","src","images","alt","sub_category","subCategory","storage_info","price","current","discount","checked"],"mappings":"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","file":"static/js/15.04d26fcb.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\ninterface AcceptDialogProps {\n  title: string;\n  content?: string;\n  show: boolean;\n  setShow: React.Dispatch<React.SetStateAction<boolean>>;\n  actionOnSuccess: () => void;\n}\n\nexport const AcceptDialog: FC<AcceptDialogProps> = ({\n  title,\n  content,\n  show,\n  setShow,\n  actionOnSuccess,\n}) => {\n  return (\n    <>\n      <Dialog\n        open={show}\n        onClose={() => setShow(false)}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\n\n        {content ? (\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-description\">\n              {content}\n            </DialogContentText>\n          </DialogContent>\n        ) : null}\n        <DialogActions>\n          <Button onClick={() => setShow(false)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            onClick={() => {\n              actionOnSuccess();\n              setShow(false);\n            }}\n            color=\"primary\"\n            autoFocus\n          >\n            Ok\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { useLocation, useHistory } from \"react-router-dom\";\n\ninterface UsePageProps {\n  countItems: number\n  maxItemsOnPage: number\n  baseUrl: string\n}\n\ninterface Indexes {\n  begin: number\n  end: number\n}\n\nconst useQuery = () => new URLSearchParams(useLocation().search);\n\nconst usePage = (props: UsePageProps) => {\n  const query = useQuery();\n  const history = useHistory();\n\n  const [indexes, setIndexes] = useState<Indexes | null>(null)\n  const [page, setPage] = useState<number>(0)\n  const [queryLoaded, setQueryLoaded] = useState<boolean>(false)\n  const [countPages, setCountPages] = useState<number>(0)\n  const [arrayPages, setArrayPages] = useState<number[]>([])\n\n  useEffect(() => {\n    if (query && !queryLoaded) {\n      const queryPage = query.get(\"page\")\n      const numberPage = Number(queryPage)\n      \n      setPage(\n        !isNaN(numberPage) \n          ? (numberPage > 0 ? numberPage - 1 : numberPage)\n          : 0 \n      )\n\n      setQueryLoaded(true)\n    }\n  }, [query, queryLoaded])\n\n  useEffect(() => {\n    if (props.countItems) {\n      setIndexes(null)\n      const countOfPages = props.countItems / props.maxItemsOnPage\n\n      if (page > countOfPages) {\n        setPage(0)\n        return\n      }\n\n      const preparePageEnd = (page * props.maxItemsOnPage) + props.maxItemsOnPage\n\n      const pageBegin = page * props.maxItemsOnPage\n      const pageEnd = preparePageEnd > props.countItems ? props.countItems - 1 : preparePageEnd\n\n      const arrayOfPages = []\n      for (let i = 0; i < countOfPages; i++) {\n        arrayOfPages.push(i + 1)\n      }\n\n      setCountPages(Number(countOfPages.toFixed(0)))\n\n      setArrayPages(arrayOfPages)\n\n      setIndexes({\n        begin: pageBegin,\n        end: pageEnd,\n      })\n    }\n  }, [page, props.maxItemsOnPage, props.countItems])\n\n  const setHistoryPage = (page: number) => {\n    history.push(`${props.baseUrl}?page=${page}`)\n    setQueryLoaded(false)\n  }\n\n  return {\n    actions: {\n      setPage: setHistoryPage,\n    },\n    loading: !indexes,\n    page,\n    indexes,\n    countPages,\n    arrayPages,\n  }\n}\n\nexport default usePage","import React from \"react\";\nimport \"./styles.scss\";\n\ninterface PaginationProps {\n  pages: number[]\n  selectedPage: number\n  onChange: (page: number) => void\n}\n\nconst Pagination = (props: PaginationProps) => {\n  return (\n    <div className=\"Pagination-Wrapper\">\n      {props.pages.map(page => (\n        <div \n          className=\"Pagination-Block\" \n          style={{ opacity: page -1 === props.selectedPage ? 1.0 : 0.3 }}\n          onClick={() => props.onChange(page)}\n        >\n          {page}\n        </div>\n      ))}\n    </div>\n  )\n};\n\nexport default Pagination;","import React, { FC, useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport TextField from \"@material-ui/core/TextField\"\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\ninterface AmountDialogProps {\n  title: string;\n  show: boolean;\n  setShow: React.Dispatch<React.SetStateAction<boolean>>;\n  actionOnSuccess: (amount: number) => void;\n}\n\nexport const AmountDialog: FC<AmountDialogProps> = ({\n  title,\n  show,\n  setShow,\n  actionOnSuccess,\n}) => {\n  const [amount, setAmount] = useState<string>('0')\n\n  return (\n    <>\n      <Dialog\n        open={show}\n        onClose={() => setShow(false)}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\n\n          <DialogContent>\n            <TextField id=\"standard-basic\" label=\"Amount:\" variant=\"standard\" type=\"number\" onChange={e => setAmount(e.target.value)} />\n          </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setShow(false)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            onClick={() => {\n              actionOnSuccess(Number(amount));\n              setShow(false);\n            }}\n            color=\"primary\"\n            autoFocus\n          >\n            Ok\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n","import { useEffect, useState } from 'react'\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../../redux/RootReducer\";\nimport {\n  fetchAllProducts,\n} from \"../../redux/products/actions\";\nimport { Product } from \"../types/Types\";\n// @ts-ignore\nimport smartSearch from 'smart-search';\n\ninterface UseProductsProps {\n  name?: string;\n  zero?: boolean;\n}\n\nconst useProducts = (props?: UseProductsProps) => {\n  const dispatch = useDispatch();\n\n  const { products } = useSelector((state: RootState) => ({\n    products: state.product.products,\n  }));\n\n  const [sortProducts, setSortProducts] = useState<Product[]>([])\n\n  useEffect(() => {\n    dispatch(fetchAllProducts())\n  }, [])\n\n  useEffect(() => {\n    setSortProducts([])\n\n    if (props && products) {\n      const { name, zero } = props\n\n      if (!name?.length && !zero) {\n        setSortProducts(products)\n        return\n      }\n\n      const filtered = products\n        .filter((product: any) => !name?.length \n          ? true \n          : searchByPattern(product.title, name) || searchByPattern(product.title_pt, name))\n        .filter((product: any) => !zero ? true : product.storage_count <= 0)\n\n      console.log('new:', filtered.length)\n\n      setSortProducts(filtered)\n    }\n\n    if (!props && products) {\n      setSortProducts(products)\n    }\n  }, [props, products])\n\n  const reload = () => dispatch(fetchAllProducts())\n\n  const searchByPattern = (title: string, pattern: string) => { \n    const lTitle = title.toLocaleLowerCase()\n    const lPattern = pattern.toLocaleLowerCase()\n\n    let position = []; \n    let found = true; \n \n    for (let i = 0; i < lTitle.length; i++) { \n      found = true; \n \n      for (let j = 0; j < lPattern.length; j++) { \n        if (lTitle[i+j] !== lPattern[j]) { \n          found = false; \n          break; \n        } \n \n      } \n \n      if (found) { \n        position.push(i); \n      } \n    } \n \n    return position.length > 0\n  }\n\n  return { \n    loading: typeof products === 'undefined',\n    products: sortProducts,\n    actions: {\n      reload,\n    }\n  }\n}\n\nexport default useProducts","import React, { FC, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Link, useRouteMatch, useHistory, useLocation } from \"react-router-dom\";\nimport { RootState } from \"../../redux/RootReducer\";\nimport Icon from \"@material-ui/core/Icon\";\nimport \"./products-list.scss\";\nimport { AcceptDialog } from \"../../components/AcceptDialog/AcceptDialog\";\nimport { AmountDialog } from \"../../components/AmountInputDialog\"\nimport Switch from \"react-switch\";\nimport {\n  fetchAllProducts,\n  fetchDeleteProduct,\n  fetchUpdateProduct,\n} from \"../../redux/products/actions\";\nimport { Product } from \"../../common/types/Types\";\nimport axios from 'axios'\nimport { firestore } from \"../../common/firebase\";\nimport usePage from \"../../common/hooks/usePage\"\nimport useProducts from \"../../common/hooks/useProducts\"\nimport Pagination from \"../../components/Pagination\"\n\ninterface ProductsListProps {\n  products: any;\n  user: any;\n  fetchAllProducts: () => void;\n  fetchDeleteProduct: (productId: string) => void;\n  fetchUpdateProduct: (\n    updated_product: Product,\n    productId: string,\n    history: any,\n    refresh?: boolean,\n  ) => void,\n}\n\nconst priorityCompare = (a: any, b: any) => {\n  const aPriority = a.priority || 0\n  const bPriority = b.priority || 0\n\n  if (aPriority < bPriority) return -1\n  if (aPriority > bPriority) return 1\n\n  return 0\n}\n\nconst ProductsListContainer: FC<ProductsListProps> = ({\n  user,\n  fetchAllProducts,\n  fetchDeleteProduct,\n  fetchUpdateProduct,\n}) => {\n  const match = useRouteMatch();\n  const history = useHistory();\n\n  const [open, setOpen] = useState(false);\n  const [stockVisible, setStockVisible] = useState(false);\n  const [amountVisible, setAmountVisible] = useState(false);\n  const [nameSort, setNameSort] = useState<string>('')\n  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null)\n  const [productIndex, setProductIndex] = useState(0);\n  const [onlyZeroCount, setOnlyZeroCount] = useState<boolean>(false);\n\n  const { products } = useProducts({\n    zero: onlyZeroCount,\n    name: nameSort,\n  });\n\n  const { actions, page, loading, indexes, arrayPages } = usePage({\n    maxItemsOnPage: 20,\n    countItems: products?.length ?? 0,\n    baseUrl: '/cabinet/products',\n  })\n\n  useEffect(() => {\n    fetchAllProducts();\n  }, []);\n\n  const onPressZeroSort = async () => {\n    setOnlyZeroCount(!onlyZeroCount)\n    // console.log(products.length)\n    // let characters = 0\n    // products.map((product: any) => characters += product.title_pt.length)\n    // console.log(characters)\n\n    // products.map((product: any) => product.title.length < 2 && console.log(product))\n    // const MAX_REQUESTS = 10\n    // let limit = 0\n\n    // await Promise.all(products.map(async (product: any) => {\n    //   try {\n    //     const TARGET_URL = 'https://translation.googleapis.com/language/translate/v2'\n    //     const API_KEY = 'AIzaSyAWAhT6IkDSQLrQQjgK57aZoZDnRlrWV4c'\n\n    //     const response = await axios.post(`${TARGET_URL}?key=${API_KEY}`, {\n    //       \"q\": product.title,\n    //       \"source\": \"pt\",\n    //       \"target\": \"en\",\n    //       \"format\": \"text\"\n    //     });\n\n    //     await firestore.collection('products').doc(product._id).update({ \n    //       title: response?.data?.data?.translations[0]?.translatedText ?? product.title,\n    //     })\n\n    //     console.log(response.data.data.translations[0].translatedText)\n    //   } catch (e) {\n\n    //   }\n    // }));\n  \n    console.log('🎯🎯🎯🎯 - DONE - 🎯🎯🎯🎯')\n  }\n\n  return (\n    <>\n      <AcceptDialog\n        title=\"Do you want delete this product?\"\n        show={open}\n        actionOnSuccess={() => fetchDeleteProduct((products[productIndex] as any)._id)}\n        setShow={setOpen}\n      />\n\n      <AmountDialog\n        title=\"Input amount please:\"\n        show={amountVisible}\n        actionOnSuccess={amount => {\n          if (!selectedProduct) {\n            return null\n          }\n\n          fetchUpdateProduct(\n            { ...selectedProduct, storage_count: amount } as any, \n            (selectedProduct as any)._id, \n            history,\n            true,\n          )\n\n          fetchAllProducts()\n        }}\n        setShow={setAmountVisible}\n      />\n\n      <AcceptDialog\n        title=\"You want change stock to 0?\"\n        show={stockVisible}\n        actionOnSuccess={() => {\n          if (!selectedProduct) {\n            return null\n          }\n\n          fetchUpdateProduct(\n            { ...selectedProduct, storage_count: 0 } as any, \n            (selectedProduct as any)._id, \n            history,\n            true,\n          )\n\n          fetchAllProducts()\n        }}\n        setShow={setStockVisible}\n      />\n      <div className=\"Products\">\n        <div className=\"Products-Header\">\n          <div className=\"Products-Header-Button\"></div>\n          <p className=\"Products-Header-Title\">Products</p>\n          <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n            <div className=\"Products-Filter\" onClick={onPressZeroSort}>\n              {onlyZeroCount ? ' Hide' : 'Show'} count 0\n            </div>\n            <Link className=\"Products-Header-Button\" to={`${match.url}/create`}>\n              <Icon className=\"Products-Header-Button-Icon\">\n                add_circle_outline\n              </Icon>\n            </Link>\n          </div>\n        </div>\n        <p className=\"Search-Input-Title\">Search</p>\n        <input className=\"Search-Input\" onChange={(e: any) => setNameSort(e.target.value)} />\n        <table className=\"Products-Table\">\n          <thead>\n            <tr>\n              <th>Image</th>\n              <th>Title</th>\n              <th>Storage Count</th>\n              <th>Sub Category</th>\n              <th>Storage Info</th>\n              <th>Priority</th>\n              <th>Price</th>\n              <th>Discount</th>\n              <th>Action</th>\n            </tr>\n          </thead>\n          <tbody>\n            {products && !loading\n              ? products\n                  .sort(priorityCompare)\n                  .slice(indexes?.begin, indexes?.end! + 1)\n                  .map((item: any, index: number) => (\n                  <>\n                    <tr key={index}>\n                      <td align=\"left\">\n                        <img\n                          src={item.images[0]}\n                          className=\"Products-Table-Image\"\n                          alt=\"\"\n                        />\n                      </td>\n                      <td className=\"Products-Table-Title\" align=\"left\">\n                        {item.title_pt}\n                      </td>\n                      <td className=\"Products-Table-Title\" align=\"left\">\n                        {item.storage_count}\n                      </td>\n                      <td className=\"Products-Table-Title\" align=\"left\">\n                        {item.sub_category.map(\n                          (subCategory: any, index: number) =>\n                            `${subCategory.name}${\n                              item.sub_category.length !== index + 1 ? \", \" : \"\"\n                            }`\n                        )}\n                      </td>\n                      <td className=\"Products-Table-Title\" align=\"left\">\n                        {item.storage_info}\n                      </td>\n                      <td className=\"Products-Table-Title\" align=\"left\">\n                        {`${item.priority || 0}`}\n                      </td>\n                      <td className=\"Products-Table-Title\" align=\"left\">\n                        {`${item.price.current} €`}\n                      </td>\n                      <td className=\"Products-Table-Title\" align=\"left\">\n                        {`${item.price.discount}%`}\n                      </td>\n                      <td align=\"right\">\n                        {/* /edit/:categoryId */}\n                        {user.type === \"admin\" && (\n                          <>\n                            <Link to={`${match.url}/edit/${item._id}`}>\n                              <Icon className=\"Products-Table-Edit\">edit</Icon>\n                            </Link>\n                            <div\n                              onClick={() => {\n                                setProductIndex(index);\n                                setOpen(true);\n                              }}\n                            >\n                              <Icon className=\"Products-Table-Delete\">delete</Icon>\n                            </div>\n                          </>\n                        )}\n\n                        {user.type === \"picker\" && (\n                          <Switch checked={item.storage_count > 0} onChange={checked => {\n                            if (!checked) {\n                              setSelectedProduct(item)\n                              setStockVisible(true)\n                            }\n\n                            if (checked) {\n                              setSelectedProduct(item)\n                              setAmountVisible(true)\n                            }\n                          }} />\n                        )}\n                      </td>\n                    </tr>\n                  </>\n                ))\n              : null}\n          </tbody>\n        </table>\n        <Pagination \n          pages={arrayPages} \n          selectedPage={page} \n          onChange={page => actions.setPage(page)}\n        />\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    products: state.product.products,\n    user: state.user.user,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  fetchAllProducts: () => dispatch(fetchAllProducts()),\n  fetchDeleteProduct: (productId: string) =>\n    dispatch(fetchDeleteProduct(productId)),\n  fetchUpdateProduct: (\n      updated_product: Product,\n      productId: string,\n      history: any, \n      refresh?: boolean,\n  ) => dispatch(fetchUpdateProduct(updated_product, productId, history, refresh)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ProductsListContainer);\n"],"sourceRoot":""}