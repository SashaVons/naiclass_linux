{"version":3,"sources":["components/FormSelect/FormSelect.tsx","common/utils/date.ts","pages/OrderItem/OrderItemContainet.tsx"],"names":["FormSelect","placeholder","name","errors","control","options","title","onChangeAction","required","defaultValue","multi","style","width","marginBottom","className","render","onChange","value","onBlur","ref","e","isMulti","filter","el","parseISODate","date","parseISO","isDateBefore","dateToCompare","isBefore","isDateAfter","isAfter","monthFormatterFullYear","divider","format","now","parse","Date","dateToLisbonTimezone","utcToZonedTime","differenceFormat","distanceDate","endDate","seconds","differenceInSeconds","secondsToTimer","Math","floor","map","time","index","join","STATUS_NAMES","InfoBlock","visible","connect","state","singleOrder","orders","user","dispatch","fetchSingleOrder","orderId","fetchUpdateOrderStatus","newStatus","userId","match","useRouteMatch","useForm","handleSubmit","register","setValue","params","console","log","useEffect","disabledStatus","status","type","label","onClickShowMaps","a","address","streetName","replace","url","streetNumber","window","open","display","flexDirection","paymentType","color","marginLeft","dateOfAccepted","fontWeight","moment","toDate","getDifferencePick","dateOfClose","onSubmit","data","orderNumber","_id","alignItems","opacity","cursor","undefined","onClick","border","borderRadius","padding","promocode","discount","total","price","toFixed","percent","getTotalOrderPrice","code","nif","userName","phoneNumber","comment","marginTop","products","sort","b","aPriority","priority","bPriority","item","align","src","images","alt","title_pt","storage_info","count","current"],"mappings":"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","file":"static/js/10.6e69187e.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport Select from \"react-select\";\nimport { Controller } from \"react-hook-form\";\nimport \"./form-select.scss\";\n\ninterface FormSelectProps {\n  placeholder?: string;\n  errors: any;\n  name: string;\n  control: any;\n  options: any;\n  required: any;\n  title?: string;\n  onChangeAction?: (value: any) => void;\n  defaultValue?: any;\n  multi?: boolean;\n}\n\nexport const FormSelect: FC<FormSelectProps> = ({\n  placeholder,\n  errors,\n  name,\n  control,\n  options,\n  title,\n  required,\n  onChangeAction,\n  defaultValue,\n  multi,\n}) => {\n  return (\n    <div style={{ width: \"100%\", marginBottom: 24 }}>\n      <p className=\"Row-Title\">{title}</p>\n      <Controller\n      control={control}\n      style={{ width: \"100%\", marginBottom: 24 }}\n      name={name}\n      render={({ onChange, onBlur, value, name, ref }) => (\n        <Select\n          className={\"Select\"}\n          onChange={(e: any) => {\n            if (onChangeAction) onChangeAction(e.value);\n            onChange(e);\n          }}\n          value={value}\n          isMulti={multi ? multi : false}\n          placeholder={placeholder}\n          options={options}\n        />\n      )}\n      defaultValue={\n        defaultValue\n          ? options.filter((el: any) => el.value === defaultValue)[0]\n          : null\n      }\n      />\n    </div>\n  );\n};\n","import {\n  format,\n  parseISO,\n  isAfter,\n  isBefore,\n  subDays,\n  isDate as isDateFNS,\n  parse,\n  differenceInMinutes,\n  differenceInSeconds,\n} from \"date-fns\";\nimport { utcToZonedTime } from \"date-fns-tz\";\nimport moment from \"moment\";\n\nexport const parseISODate = (date: Date | string) =>\n  typeof date === \"string\" ? parseISO(date) : date;\n\nexport const isDate = (date: Date | string) => isDateFNS(date);\n\nexport const subDateDays = (date: Date | string, amount: number) =>\n  subDays(parseISODate(date), amount);\n\nexport const isDateBefore = (\n  date: Date | string,\n  dateToCompare: Date | string\n) => isBefore(parseISODate(date), parseISODate(dateToCompare));\n\nexport const isDateAfter = (\n  date: Date | string,\n  dateToCompare: Date | string\n) => isAfter(parseISODate(date), parseISODate(dateToCompare));\n\nexport const monthFormatter = (date: Date | string, divider = \".\") =>\n  format(parseISODate(date), `yy${divider}MM${divider}dd`);\n\nexport const monthFormatterFullYear = (date: Date | string, divider = \".\") =>\n  format(parseISODate(date), `yyyy${divider}MM${divider}dd`);\n\nexport const fullDateFormatter = (date: Date | string, divider = \".\") =>\n  format(parseISODate(date), `HH:mm aaa iiii do LLLL`);\n\nexport const dayDateFormatter = (date: Date | string, divider = \".\") =>\n  format(parseISODate(date), `iiii do LLLL`);\n\nexport const timeFormatter = (date: Date | string) =>\n  format(parseISODate(date), \"HH:mm\");\n\nexport const parseShortDate = (date: string) =>\n  parse(date, \"dd/MM/yyyy\", new Date());\n\nexport const now = () =>\n  parse(format(new Date(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\", new Date());\n\nexport const dateToLisbonTimezone = (date: Date) => {\n  return utcToZonedTime(date, 'Asia/Tokyo')\n}\n\nexport const differenceFormat = (distanceDate: Date, endDate: Date) => {\n  const seconds = differenceInSeconds(\n    dateToLisbonTimezone(distanceDate), \n    dateToLisbonTimezone(endDate)\n  );\n\n  return secondsToTimer(seconds)\n}\n\nexport const secondsToTimer = (seconds: number) => {\n  const hour = Math.floor(seconds / 3600);\n  const minute = Math.floor(seconds / 60) % 60;\n  const second = seconds % 60;\n\n  return [hour, minute, second]\n    .map(time => time < 10 ? \"0\" + time : time)\n    .filter((time, index) => time !== \"00\" || index > 0)\n    .join(\":\");\n}","import React, { FC, useEffect } from \"react\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport Icon from \"@material-ui/core/Icon\";\nimport {\n  fetchSingleOrder,\n  fetchUpdateOrderStatus,\n} from \"../../redux/orders/actions\";\nimport { useForm } from \"react-hook-form\";\nimport { RootState } from \"../../redux/RootReducer\";\nimport moment from \"moment\";\nimport \"./order-item.scss\";\nimport { FormSelect } from \"../../components/FormSelect/FormSelect\";\nimport \"../ProductsList/products-list.scss\";\nimport { differenceFormat, dateToLisbonTimezone, parseISODate } from \"../../common/utils/date\"\nimport axios from 'axios'\n\ntype EditOrder = {\n  status: string;\n};\n\ninterface OrderItemProps {\n  singleOrder: any;\n  user: any;\n  fetchSingleOrder: (orderId: string) => void;\n  fetchUpdateOrderStatus: (orderId: string, newStatus: string, userId: string) => void;\n}\n\nexport const STATUS_NAMES: Record<string, string> = {\n  \"WAIT FOR CARD PAYMENT\": 'Wait for card payment',\n  \"DELIVERING\": \"Ready to pick\",\n  \"ACCEPTED\": \"Picking\",\n  \"SENT\": \"Delivering\",\n  \"CLOSE\": \"Delivered\",\n  \"CANCELED\": \"Canceled\",\n}\n\ninterface InfoBlockProps {\n  title: string\n  value: any\n  visible?: boolean\n}\n\nconst InfoBlock = ({ title, value, visible = true }: InfoBlockProps) => {\n  if (!visible) {\n    return null\n  }\n\n  return (\n    <div className=\"Order-Item-Column\">\n      <p className=\"Order-Item-Form-Title\">{title}</p>\n      <p className=\"Order-Item-Form-Text\">{value}</p>\n    </div>\n  )\n}\n\nconst OrderItemContainer: FC<OrderItemProps> = ({\n  fetchSingleOrder,\n  fetchUpdateOrderStatus,\n  singleOrder,\n  user,\n}) => {\n  const match = useRouteMatch<any>();\n  const { register, handleSubmit, errors, setValue, control } = useForm();\n  const { orderId } = match.params;\n\n  console.log(singleOrder);\n\n  useEffect(() => {\n    fetchSingleOrder(orderId);\n  }, []);\n\n  const getDifferencePick = (): string | null => {\n    if (!singleOrder?.dateOfAccepted) {\n      return null\n    }\n\n    const dateOfAccepted = moment(singleOrder.dateOfAccepted)\n    const date = moment(singleOrder.date)\n    console.log(dateOfAccepted.toDate())\n    console.log(date.toDate())\n\n    return differenceFormat(\n      parseISODate(singleOrder.dateOfAccepted),\n      parseISODate(singleOrder.date),\n    )\n  }\n\n  const getDifferenceClose = (): string | null => {\n    if (!singleOrder?.dateOfClose) {\n      return null\n    }\n\n    return differenceFormat(\n      parseISODate(singleOrder.dateOfClose),\n      parseISODate(singleOrder.date),\n    )\n  }\n\n  const checkIsButtonStatusDisabled = () => {\n    if (!singleOrder?.status) {\n      return true\n    }\n\n    if (user.type === 'picker') {\n      return (\n        singleOrder.status === 'SENT' ||\n        singleOrder.status === 'CLOSE' ||\n        singleOrder.status === 'CANCELED'\n      )\n    }\n\n    if (user.type === 'dispatcher') {\n      return (\n        singleOrder.status === 'CLOSE' ||\n        singleOrder.status === 'CANCELED'\n      )\n    }\n\n    return true\n  } \n\n  const disabledStatus = checkIsButtonStatusDisabled()\n\n  useEffect(() => {\n    if (singleOrder)\n      setValue(\"status\", {\n        value: singleOrder.status,\n        label: STATUS_NAMES[singleOrder.status],\n      });\n  }, [singleOrder]);\n\n  const onSubmit = (data: EditOrder) => {\n    console.log(data);\n  };\n\n  const onClickShowMaps = async () => {\n    const address = singleOrder.address.streetName.replace(\" \", \"+\");\n    const url = `https://www.google.com.ua/maps/place/${address}+${singleOrder.address.streetNumber}+Lisboa`;\n\n    window.open(url);\n  };\n\n  const onChangeStatusByRole = () => {\n    if (user.type === 'picker') {\n      fetchUpdateOrderStatus(singleOrder._id, 'SENT', singleOrder.userId)\n    }\n\n    if (user.type === 'dispatcher') {\n      fetchUpdateOrderStatus(singleOrder._id, 'CLOSE', singleOrder.userId)\n    }\n  }\n\n  const getTotalOrderPrice = () => {\n    if (singleOrder.promocode && singleOrder.promocode.discount) {\n      if (!singleOrder.promocode.type || singleOrder.promocode.type === 'CASH') {\n        const total = singleOrder.price + singleOrder.promocode.discount ?? 0\n        return `${total.toFixed(2)} €`\n      }\n\n      const percent = singleOrder.price * 100 / (100 - singleOrder.promocode.discount)\n      return `${percent.toFixed(2)} €`\n    }\n\n    return `${singleOrder.price.toFixed(2)} €`;\n  };\n\n  const priorityCompare = (a: any, b: any) => {\n    const aPriority = a.priority || 0;\n    const bPriority = b.priority || 0;\n\n    if (aPriority < bPriority) return -1;\n    if (aPriority > bPriority) return 1;\n\n    return 0;\n  };\n\n  if (!singleOrder) {\n    return null\n  }\n\n  return (\n    <div className=\"Order-Item\">\n      <div className=\"Order-Item-Header\">\n        <p className=\"Order-Item-Header-Title\" style={{ display: 'flex', flexDirection: 'row' }}>Order{'  '}\n          {singleOrder.paymentType === 'CARD' && <p style={{ color: 'green', marginLeft: 5 }} >PAID</p>}\n        </p>\n        <div className=\"Order-Item-Header-Button\">\n          {singleOrder?.dateOfAccepted && (\n            <div style={{ fontWeight: 'bold' }} > \n              Time of picking - {getDifferencePick()}\n            </div>\n          )}\n\n          {singleOrder?.dateOfClose && (\n            <div style={{ fontWeight: 'bold' }} > \n              Time of close - {getDifferenceClose()}\n            </div>\n          )}\n        </div>\n      </div>\n      <form className=\"Order-Item-Form\" onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"Order-Item-Row\">\n          <InfoBlock title=\"Date\" value={moment(singleOrder.date).format(\"DD/MM/YY HH:mm\")} />\n          <InfoBlock title=\"Order number\" value={singleOrder.orderNumber} />\n\n          <div className=\"Order-Item-Column\">\n            <div style={{ width: '100%' }}>\n              {user.type === \"admin\" || user.type === \"picker\" ? (\n                <div>\n                  <p className=\"Order-Item-Form-Title\">Status</p>\n                  <FormSelect\n                    placeholder={\"Status\"}\n                    name={\"status\"}\n                    options={[\n                      { _id: \"DELIVERING\", name: \"Ready to pick\" },\n                      { _id: \"ACCEPTED\", name: \"Picking\" },\n                      { _id: \"SENT\", name: \"Delivering\" },\n                      { _id: \"CLOSE\", name: \"Delivered\" },\n                      { _id: \"CANCELED\", name: \"Canceled\" },\n                    ].map((el: any) => {\n                      return { value: el._id, label: el.name };\n                    })}\n                    errors={errors}\n                    control={control}\n                    onChangeAction={(value: string) =>\n                      fetchUpdateOrderStatus(singleOrder._id, value, singleOrder.userId)\n                    }\n                    required={{ required: true }}\n                  />\n                </div>\n              ) : (\n                <div>\n                  <p className=\"Order-Item-Form-Title\">Status</p>\n                  <p className=\"Order-Item-Form-Text\">{STATUS_NAMES[singleOrder.status]}</p>\n                </div>\n              )}\n\n              {(user.type === 'picker' || user.type === \"dispatcher\") && (\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    alignItems: \"center\",\n                    width: '100%',\n                    opacity: disabledStatus ? 0.4 : 1,\n                    cursor: !disabledStatus ? \"pointer\" : undefined,\n                  }}\n                  onClick={!disabledStatus ? onChangeStatusByRole : () => {}}\n                >\n                  <div\n                    style={{\n                      border: \"2px solid #c700cb\",\n                      borderRadius: 10,\n                      padding: 7,\n                      width: '100%',\n                      color: \"#c700cb\",\n                    }}\n                  >\n                    {user.type === 'picker' && 'Picked'}\n                    {user.type === 'dispatcher' && 'Delivered'}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"Order-Item-Row\">\n            <InfoBlock title=\"Payment type\" value={singleOrder.paymentType} />\n            <InfoBlock title=\"Subtotal\" value={getTotalOrderPrice()} />\n            <InfoBlock title=\"Total\" value={`${singleOrder.price?.toFixed(2)} €`} />\n            <InfoBlock \n              title=\"Promocode\" \n              value={singleOrder.promocode?.code \n                      ? user.type === \"admin\" \n                          ? singleOrder.promocode.code \n                          : \"Used\"\n                      : \"None\"}\n            />\n        </div>\n\n          <div className=\"Order-Item-Row\">\n            <InfoBlock title=\"NIF\" value={singleOrder?.nif} visible={!!singleOrder?.nif}/>\n            <InfoBlock title=\"User Name\" value={singleOrder.userName} visible={!!singleOrder.userName} />\n            <InfoBlock title=\"Phone Number\" value={singleOrder.phoneNumber} visible={!!singleOrder.phoneNumber} />\n            <InfoBlock title=\"Comment\" \n              value={singleOrder.address?.comment\n                ? singleOrder.address.comment\n                : \"Not added\"}\n            />\n          </div>\n\n          <p className=\"Order-Item-Form-Main\" style={{ marginBottom: 30, marginTop: 50 }}>ADDRESS</p>\n\n          <div className=\"Order-Item-Row\">\n            <InfoBlock title=\"Street Name\" \n              value={singleOrder.address?.streetName\n                ? singleOrder.address.streetName\n                : \"Not added\"}\n            />\n\n            <InfoBlock title=\"Street Number\" \n              value={singleOrder.address?.streetNumber\n                ? singleOrder.address.streetNumber\n                : \"Not added\"}\n            />\n\n            <InfoBlock title=\"Floor\" \n              value={singleOrder.address?.floor\n                ? singleOrder.address.floor\n                : \"Not added\"}\n            />\n          </div>\n\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              alignItems: \"center\",\n              marginBottom: 25,\n              cursor: \"pointer\",\n            }}\n            onClick={onClickShowMaps}\n          >\n            <div\n              style={{\n                border: \"2px solid #c700cb\",\n                borderRadius: 10,\n                padding: 7,\n                color: \"#c700cb\",\n              }}\n            >\n              Show on maps\n            </div>\n          </div>\n          <p className=\"Order-Item-Form-Main\">Products</p>\n          <table className=\"Orders-Table\">\n            <thead>\n              <tr>\n                <th>Image</th>\n                <th>Title</th>\n                <th>Storage Info</th>\n                <th>Count</th>\n                <th>Price</th>\n                <th>Priority</th>\n              </tr>\n            </thead>\n            <tbody>\n              {singleOrder.products\n                ? singleOrder.products\n                    .sort(priorityCompare)\n                    .map((item: any, index: number) =>\n                      !item.price ? null : (\n                        <>\n                          <tr>\n                            <td align=\"left\">\n                              <img\n                                src={item.images[0]}\n                                alt=\"\"\n                                className=\"Orders-Table-Image\"\n                              />\n                            </td>\n                            <td className=\"Orders-Table-Title\" align=\"left\">\n                              {item.title_pt}\n                            </td>\n                            <td className=\"Orders-Table-Title\" align=\"left\">\n                              {item.storage_info}\n                            </td>\n                            <td className=\"Orders-Table-Title\" align=\"left\">\n                              {item.count}\n                            </td>\n                            <td className=\"Orders-Table-Title\" align=\"left\">\n                              {item.price.current.toFixed(2)}\n                            </td>\n                            <td className=\"Orders-Table-Title\" align=\"left\">\n                              {item.priority || 0}\n                            </td>\n                          </tr>\n                        </>\n                      )\n                    )\n                : null}\n            </tbody>\n          </table>\n      </form>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    singleOrder: state.orders.singleOrder,\n    user: state.user.user,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  fetchSingleOrder: (orderId: string) => dispatch(fetchSingleOrder(orderId)),\n  fetchUpdateOrderStatus: (orderId: string, newStatus: string, userId: string) =>\n    dispatch(fetchUpdateOrderStatus(orderId, newStatus, userId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrderItemContainer);\n"],"sourceRoot":""}