{"version":3,"sources":["common/utils/date.ts","pages/EmployeeStatistics/hooks/useEmployees.ts","pages/EmployeeStatistics/components/Table/index.tsx","pages/EmployeeStatistics/EmployeeStatistics.tsx"],"names":["parseISODate","date","parseISO","isDateBefore","dateToCompare","isBefore","isDateAfter","isAfter","monthFormatterFullYear","divider","format","now","parse","Date","dateToLisbonTimezone","utcToZonedTime","differenceFormat","distanceDate","endDate","seconds","differenceInSeconds","secondsToTimer","Math","floor","map","time","filter","index","join","useEmployees","start","end","useState","employees","setEmployees","loading","setLoading","refactorOrders","user","orders","refactored","order","type","dateOfAccepted","timeOfProccessed","dateOfClose","left","right","avg","Number","length","toFixed","fetchEmployees","useCallback","a","firestore","collection","where","get","usersRef","ordersRef","sortEmployees","docs","doc","data","_id","id","dateOrders","console","log","orderNumber","employee","sortOrders","pickedBy","userId","deliveredBy","name","useEffect","couriers","pickers","EmployeeTable","title","history","useHistory","className","align","style","display","flexDirection","textDecoration","cursor","onMouseDown","event","button","window","open","onClick","push","marginLeft","color","connect","state","dispatch","fetchAllOrders","fetchDeleteCategory","categoryId","useRouteMatch","setDate","addDays","setEndDate","Preloader","value","onChange","target","Table"],"mappings":"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","file":"static/js/16.0ded4ad9.chunk.js","sourcesContent":["import {\n  format,\n  parseISO,\n  isAfter,\n  isBefore,\n  subDays,\n  isDate as isDateFNS,\n  parse,\n  differenceInMinutes,\n  differenceInSeconds,\n} from \"date-fns\";\nimport { utcToZonedTime } from \"date-fns-tz\";\nimport moment from \"moment\";\n\nexport const parseISODate = (date: Date | string) =>\n  typeof date === \"string\" ? parseISO(date) : date;\n\nexport const isDate = (date: Date | string) => isDateFNS(date);\n\nexport const subDateDays = (date: Date | string, amount: number) =>\n  subDays(parseISODate(date), amount);\n\nexport const isDateBefore = (\n  date: Date | string,\n  dateToCompare: Date | string\n) => isBefore(parseISODate(date), parseISODate(dateToCompare));\n\nexport const isDateAfter = (\n  date: Date | string,\n  dateToCompare: Date | string\n) => isAfter(parseISODate(date), parseISODate(dateToCompare));\n\nexport const monthFormatter = (date: Date | string, divider = \".\") =>\n  format(parseISODate(date), `yy${divider}MM${divider}dd`);\n\nexport const monthFormatterFullYear = (date: Date | string, divider = \".\") =>\n  format(parseISODate(date), `yyyy${divider}MM${divider}dd`);\n\nexport const fullDateFormatter = (date: Date | string, divider = \".\") =>\n  format(parseISODate(date), `HH:mm aaa iiii do LLLL`);\n\nexport const dayDateFormatter = (date: Date | string, divider = \".\") =>\n  format(parseISODate(date), `iiii do LLLL`);\n\nexport const timeFormatter = (date: Date | string) =>\n  format(parseISODate(date), \"HH:mm\");\n\nexport const parseShortDate = (date: string) =>\n  parse(date, \"dd/MM/yyyy\", new Date());\n\nexport const now = () =>\n  parse(format(new Date(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\", new Date());\n\nexport const dateToLisbonTimezone = (date: Date) => {\n  return utcToZonedTime(date, 'Asia/Tokyo')\n}\n\nexport const differenceFormat = (distanceDate: Date, endDate: Date) => {\n  const seconds = differenceInSeconds(\n    dateToLisbonTimezone(distanceDate), \n    dateToLisbonTimezone(endDate)\n  );\n\n  return secondsToTimer(seconds)\n}\n\nexport const secondsToTimer = (seconds: number) => {\n  const hour = Math.floor(seconds / 3600);\n  const minute = Math.floor(seconds / 60) % 60;\n  const second = seconds % 60;\n\n  return [hour, minute, second]\n    .map(time => time < 10 ? \"0\" + time : time)\n    .filter((time, index) => time !== \"00\" || index > 0)\n    .join(\":\");\n}","import { useEffect, useState, useCallback } from \"react\";\nimport type { Employee } from \"../components/Table\";\nimport { firestore } from \"../../../common/firebase\";\nimport {\n  differenceFormat,\n  parseISODate,\n  secondsToTimer,\n  isDateAfter,\n  isDateBefore,\n} from \"../../../common/utils/date\";\nimport { differenceInSeconds } from \"date-fns\";\n\ninterface EmployeeTimer {\n  avg: string;\n  orders: any[];\n}\n\ninterface UseEmployeesProps {\n  start: Date;\n  end: Date;\n}\n\nconst useEmployees = ({ start, end }: UseEmployeesProps) => {\n  const [employees, setEmployees] = useState<Employee[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n\n  const refactorOrders = (user: any, orders: any[]): EmployeeTimer => {\n    let seconds = 0;\n\n    const refactored = orders.map((order) => {\n      if (user.type === \"picker\" && !order?.dateOfAccepted) {\n        return { ...order, timeOfProccessed: null };\n      }\n\n      if (user.type === \"dispatcher\" && !order?.dateOfClose) {\n        return { ...order, timeOfProccessed: null };\n      }\n\n      const left =\n        user.type === \"picker\"\n          ? parseISODate(order.dateOfAccepted)\n          : parseISODate(order.dateOfClose);\n\n      const right =\n        user.type === \"picker\"\n          ? parseISODate(order.date)\n          : parseISODate(order.dateOfAccepted);\n\n      const format = differenceFormat(\n        parseISODate(order.dateOfAccepted),\n        parseISODate(order.date)\n      );\n\n      seconds += differenceInSeconds(left, right);\n\n      return {\n        ...order,\n        timeOfProccessed: format,\n      };\n    });\n\n    return {\n      avg: secondsToTimer(Number((seconds / orders.length).toFixed(0))),\n      orders: refactored,\n    };\n  };\n\n  const fetchEmployees = useCallback(async () => {\n    const usersRef = await firestore\n      .collection(\"additional_users\")\n      .where(\"type\", \"in\", [\"dispatcher\", \"picker\"])\n      .get();\n\n    const ordersRef = await firestore.collection(\"orders\").get();\n\n    const sortEmployees = usersRef.docs.map((doc) => doc.data());\n    const orders = ordersRef.docs.map(\n      (doc) => ({ _id: doc.id, ...doc.data() } as any)\n    );\n\n    const dateOrders = orders.filter((order) => {\n      const date = parseISODate(order.date);\n      const dateCompare = isDateAfter(date, start) && isDateBefore(date, end);\n\n      return dateCompare;\n    });\n\n    console.log(\"Date_Orders:\", dateOrders);\n    dateOrders.map((order) => order.orderNumber === 1507 && console.log(order));\n\n    const employees: Employee[] = sortEmployees.map((employee) => {\n      const sortOrders =\n        employee.type === \"picker\"\n          ? dateOrders.filter(\n              (order) => order?.pickedBy?.id === employee.userId\n            )\n          : dateOrders.filter(\n              (order) => order?.deliveredBy?.id === employee.userId\n            );\n\n      const refactored = refactorOrders(employee, sortOrders);\n\n      return {\n        id: employee.userId,\n        name: employee.name ?? \"Name not found\",\n        type: employee.type,\n        avg: !sortOrders.length ? \"00:00\" : refactored.avg,\n        orders: refactored.orders,\n      } as Employee;\n    });\n\n    setEmployees(employees);\n    setLoading(false);\n  }, [start, end]);\n\n  useEffect(() => {\n    fetchEmployees();\n    console.log(\"123123\");\n  }, [start]);\n\n  return {\n    loading,\n    employees,\n    couriers: employees.filter((employee) => employee.type === \"dispatcher\"),\n    pickers: employees.filter((employee) => employee.type === \"picker\"),\n  };\n};\n\nexport default useEmployees;\n","import React from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport \"./styles.scss\"\nimport \"../../order-statistic.scss\"\n\nexport interface Employee {\n  id: string;\n  name: string;\n  type: 'picker' | 'dispatcher';\n  avg: string;\n  orders: any[];\n}\n\ninterface EmployeeTableProps {\n  title: string\n  employees: Employee[]\n}\n\nconst EmployeeTable = ({ title, employees }: EmployeeTableProps) => {\n  const history = useHistory();\n\n  return (\n    <div>\n      <p className=\"Employee-Table-Title\">{title}</p>\n      <table className=\"Orders-Table\">\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Avg. time</th>\n              <th>Orders</th>\n            </tr>\n          </thead>\n          <tbody>\n            {employees.map(employee => (\n              <>\n                <tr>\n                  <td className=\"Orders-Table-Title\" align=\"left\">{employee.name}</td>\n                  <td className=\"Orders-Table-Title\" align=\"left\">{employee.avg}</td>\n                  <td className=\"Orders-Table-Title\" align=\"left\">\n                    {employee.orders.map(order => (\n                      <div style={{ display: 'flex', flexDirection: 'row' }}>\n                        <div\n                          style={{ display: 'flex', textDecoration: 'underline', cursor: 'pointer', flexDirection: 'row' }}\n                          onMouseDown={event => event.button === 1 && window.open(`/cabinet/orders/${order._id}`, '_blank')} \n                          onClick={() =>\n                            history.push(`/cabinet/orders/${order._id}`)\n                          }\n                        >\n                          {order.orderNumber}\n                        </div> \n\n                        <div style={{ marginLeft: 5 }}>\n                          (Time: {order.timeOfProccessed})\n                        </div>\n                      </div> \n                    ))}\n\n                    {!employee.orders.length && <p style={{ color: 'lightgray' }}>Not found</p>}\n                  </td>\n                </tr>\n              </>\n            ))}\n          </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default EmployeeTable","import React, { FC, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport {\n  fetchAllCategories,\n  fetchDeleteCategory,\n} from \"../../redux/categories/actions\";\nimport { useRouteMatch, useHistory } from \"react-router-dom\";\nimport { RootState } from \"../../redux/RootReducer\";\nimport \"./order-statistic.scss\";\nimport { fetchAllOrders } from \"../../redux/orders/actions\";\nimport {\n  parseISODate,\n  isDateAfter,\n  isDateBefore,\n  now,\n  monthFormatterFullYear,\n} from \"../../common/utils/date\";\nimport { addDays } from \"date-fns\";\nimport { Preloader } from \"../../components/Preloader/Preloader\";\nimport { useEmployees } from \"./hooks\";\nimport { Table } from \"./components\";\n\ninterface OrdersListProps {\n  orders: any;\n  fetchAllOrders: () => void;\n  fetchDeleteCategory: (categoryId: string) => void;\n}\n\nconst OrdersListContainer: FC<OrdersListProps> = ({\n  orders,\n  fetchAllOrders,\n  fetchDeleteCategory,\n}) => {\n  const match = useRouteMatch();\n  const history = useHistory();\n  const [date, setDate] = useState<Date>(now());\n  const [endDate, setEndDate] = useState<Date>(addDays(now(), 1));\n\n  const { loading, employees, couriers, pickers } = useEmployees({\n    start: date,\n    end: endDate,\n  });\n\n  console.log(employees);\n\n  const onDateChange = (value: string) => {\n    console.log(value);\n    if (value) {\n      setDate(parseISODate(value));\n      setEndDate(addDays(parseISODate(value), 1));\n    }\n  };\n\n  if (loading) {\n    return <Preloader />;\n  }\n\n  return (\n    <>\n      <div className=\"Orders\">\n        <div className=\"Orders-Header\">\n          <div className=\"Orders-Header-Button\"></div>\n          <p className=\"Orders-Header-Title\">Employee statistics</p>\n          <div className=\"Orders-Header-Button\"></div>\n        </div>\n        <div className=\"Orders-Middle-Stats\">\n          <input\n            type=\"date\"\n            className=\"Orders-Middle-Stats-Date\"\n            value={monthFormatterFullYear(date, \"-\")}\n            onChange={(event) => onDateChange(event.target.value)}\n          />\n        </div>\n        <Table title=\"Couriers\" employees={couriers} />\n        <Table title=\"Pickers\" employees={pickers} />\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    orders: state.orders.orders,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  fetchAllOrders: () => dispatch(fetchAllOrders()),\n  fetchDeleteCategory: (categoryId: string) =>\n    dispatch(fetchDeleteCategory(categoryId)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(OrdersListContainer);\n"],"sourceRoot":""}